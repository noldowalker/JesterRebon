//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/Boot/SceneSystems/Input/JesterInputActionsAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JesterInputActionsAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JesterInputActionsAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JesterInputActionsAsset"",
    ""maps"": [
        {
            ""name"": ""actions"",
            ""id"": ""d4bb1258-ed82-41e5-bedb-f8ede6837e10"",
            ""actions"": [
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""12395684-1474-46d9-8d79-c828e9f43037"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""forward"",
                    ""type"": ""Value"",
                    ""id"": ""c31d229f-e45a-42a6-856c-6f6470d6cb67"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""right"",
                    ""type"": ""Value"",
                    ""id"": ""89f0bafa-fdae-4188-96a6-1adb0599466b"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotateX"",
                    ""type"": ""Value"",
                    ""id"": ""607ed494-04ec-43c2-99fc-7f4c79f41a90"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotateY"",
                    ""type"": ""Value"",
                    ""id"": ""f1c59e1a-f0f9-479a-8318-b63229c2852a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""dash"",
                    ""type"": ""Button"",
                    ""id"": ""4450c3d9-43c3-4b17-9a77-9a8df3c7ae6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""kick"",
                    ""type"": ""Button"",
                    ""id"": ""ae1afd24-f281-40cc-aa8b-2da276e5e0ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""punch"",
                    ""type"": ""Button"",
                    ""id"": ""ffbf2256-c46b-4734-95f0-bc73e44642d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""1stSkill"",
                    ""type"": ""Button"",
                    ""id"": ""b8ede9f2-e01d-4985-b0bd-eb64c2f078c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""2ndSkill"",
                    ""type"": ""Button"",
                    ""id"": ""42d4fbd3-30c5-4479-bdc3-56f4b6e94c5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1633598f-5aed-43c9-adcb-d5119155edcb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""eaadbddc-c652-442a-9e52-6dca4517bf8d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4e32b738-df5a-4cbd-b405-b292424ea70f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1acdb0d9-0349-4c39-86ad-60adaf17b2ca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ce2d8e0c-58a1-4b95-a400-9e1ca90053cb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6bbe05a6-ce13-4c86-9642-081cd84e68fa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""327b9f29-9011-4154-95df-0cbdd8acffe9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ea265214-d756-4082-ae82-44f9c81749a3"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62c88c6c-8be6-4710-888c-8fecd2f472b6"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d5b6e95-be5f-42f3-9bad-41e5a8d66afa"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfded424-d8f9-4236-98f3-dab0b66d8d19"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5de31af8-02ba-4573-98d4-cf792b0faec1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4664852d-7ac8-4f24-bd78-b4f5a6ae5caf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""1stSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c634c95f-3c9e-480d-9d98-73455c24fd37"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""2ndSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // actions
        m_actions = asset.FindActionMap("actions", throwIfNotFound: true);
        m_actions_jump = m_actions.FindAction("jump", throwIfNotFound: true);
        m_actions_forward = m_actions.FindAction("forward", throwIfNotFound: true);
        m_actions_right = m_actions.FindAction("right", throwIfNotFound: true);
        m_actions_rotateX = m_actions.FindAction("rotateX", throwIfNotFound: true);
        m_actions_rotateY = m_actions.FindAction("rotateY", throwIfNotFound: true);
        m_actions_dash = m_actions.FindAction("dash", throwIfNotFound: true);
        m_actions_kick = m_actions.FindAction("kick", throwIfNotFound: true);
        m_actions_punch = m_actions.FindAction("punch", throwIfNotFound: true);
        m_actions__1stSkill = m_actions.FindAction("1stSkill", throwIfNotFound: true);
        m_actions__2ndSkill = m_actions.FindAction("2ndSkill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // actions
    private readonly InputActionMap m_actions;
    private List<IActionsActions> m_ActionsActionsCallbackInterfaces = new List<IActionsActions>();
    private readonly InputAction m_actions_jump;
    private readonly InputAction m_actions_forward;
    private readonly InputAction m_actions_right;
    private readonly InputAction m_actions_rotateX;
    private readonly InputAction m_actions_rotateY;
    private readonly InputAction m_actions_dash;
    private readonly InputAction m_actions_kick;
    private readonly InputAction m_actions_punch;
    private readonly InputAction m_actions__1stSkill;
    private readonly InputAction m_actions__2ndSkill;
    public struct ActionsActions
    {
        private @JesterInputActionsAsset m_Wrapper;
        public ActionsActions(@JesterInputActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @jump => m_Wrapper.m_actions_jump;
        public InputAction @forward => m_Wrapper.m_actions_forward;
        public InputAction @right => m_Wrapper.m_actions_right;
        public InputAction @rotateX => m_Wrapper.m_actions_rotateX;
        public InputAction @rotateY => m_Wrapper.m_actions_rotateY;
        public InputAction @dash => m_Wrapper.m_actions_dash;
        public InputAction @kick => m_Wrapper.m_actions_kick;
        public InputAction @punch => m_Wrapper.m_actions_punch;
        public InputAction @_1stSkill => m_Wrapper.m_actions__1stSkill;
        public InputAction @_2ndSkill => m_Wrapper.m_actions__2ndSkill;
        public InputActionMap Get() { return m_Wrapper.m_actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Add(instance);
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @forward.started += instance.OnForward;
            @forward.performed += instance.OnForward;
            @forward.canceled += instance.OnForward;
            @right.started += instance.OnRight;
            @right.performed += instance.OnRight;
            @right.canceled += instance.OnRight;
            @rotateX.started += instance.OnRotateX;
            @rotateX.performed += instance.OnRotateX;
            @rotateX.canceled += instance.OnRotateX;
            @rotateY.started += instance.OnRotateY;
            @rotateY.performed += instance.OnRotateY;
            @rotateY.canceled += instance.OnRotateY;
            @dash.started += instance.OnDash;
            @dash.performed += instance.OnDash;
            @dash.canceled += instance.OnDash;
            @kick.started += instance.OnKick;
            @kick.performed += instance.OnKick;
            @kick.canceled += instance.OnKick;
            @punch.started += instance.OnPunch;
            @punch.performed += instance.OnPunch;
            @punch.canceled += instance.OnPunch;
            @_1stSkill.started += instance.On_1stSkill;
            @_1stSkill.performed += instance.On_1stSkill;
            @_1stSkill.canceled += instance.On_1stSkill;
            @_2ndSkill.started += instance.On_2ndSkill;
            @_2ndSkill.performed += instance.On_2ndSkill;
            @_2ndSkill.canceled += instance.On_2ndSkill;
        }

        private void UnregisterCallbacks(IActionsActions instance)
        {
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @forward.started -= instance.OnForward;
            @forward.performed -= instance.OnForward;
            @forward.canceled -= instance.OnForward;
            @right.started -= instance.OnRight;
            @right.performed -= instance.OnRight;
            @right.canceled -= instance.OnRight;
            @rotateX.started -= instance.OnRotateX;
            @rotateX.performed -= instance.OnRotateX;
            @rotateX.canceled -= instance.OnRotateX;
            @rotateY.started -= instance.OnRotateY;
            @rotateY.performed -= instance.OnRotateY;
            @rotateY.canceled -= instance.OnRotateY;
            @dash.started -= instance.OnDash;
            @dash.performed -= instance.OnDash;
            @dash.canceled -= instance.OnDash;
            @kick.started -= instance.OnKick;
            @kick.performed -= instance.OnKick;
            @kick.canceled -= instance.OnKick;
            @punch.started -= instance.OnPunch;
            @punch.performed -= instance.OnPunch;
            @punch.canceled -= instance.OnPunch;
            @_1stSkill.started -= instance.On_1stSkill;
            @_1stSkill.performed -= instance.On_1stSkill;
            @_1stSkill.canceled -= instance.On_1stSkill;
            @_2ndSkill.started -= instance.On_2ndSkill;
            @_2ndSkill.performed -= instance.On_2ndSkill;
            @_2ndSkill.canceled -= instance.On_2ndSkill;
        }

        public void RemoveCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionsActions @actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnForward(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnRotateX(InputAction.CallbackContext context);
        void OnRotateY(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
        void On_1stSkill(InputAction.CallbackContext context);
        void On_2ndSkill(InputAction.CallbackContext context);
    }
}
